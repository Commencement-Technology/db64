const{isArray:isArray}=Array,connections=[],openDatabase=(e="default",t)=>new Promise(((r,o)=>{let a;try{a=window.indexedDB.open(e,1)}catch(e){o(e)}return a.onupgradeneeded=({target:e})=>{const{result:r}=e;t.forEach((e=>{if(!r.objectStoreNames.contains(e)){r.createObjectStore(e).onerror=e=>o(e.target.error)}}))},a.onsuccess=({target:e})=>{connections.push(a),r(e.result)},a.onerror=({target:e})=>o(e.result),a})),setData=async(e,t,r,o,a)=>{try{const s=e.transaction([t],"readwrite").objectStore(t);if(a){const e=isArray(o)?()=>o.map(((e,t)=>s.put(e,t))):()=>Object.entries(o).map((([e,t])=>s.put(t,e)));await Promise.all(e())}else await s.put(o,r)}catch(e){console.error(e)}return db64},getData=async(e,t,r,o)=>new Promise((a=>{const s=e.transaction([t]).objectStore(t);let n;if(o){const e={};s.openCursor().onsuccess=t=>{const o=t.target.result;o?(r.includes(o.key)&&(e[o.key]=o.value),o.continue()):a(e)}}else n=s.get(r),n.onsuccess=()=>a(n.result)})),deleteData=async(e,t,r)=>{try{const o=e.transaction([t],"readwrite").objectStore(t);o.openCursor().onsuccess=e=>{const t=e.target.result;t&&((isArray(r)?r:[r]).includes(t.key)&&t.delete(),t.continue())}}catch(e){console.error(e)}return db64},clearStore=(e,t)=>new Promise(((r,o)=>{const a=e.transaction([t],"readwrite").objectStore(t).clear();a.onsuccess=r(db64),a.onerror=e=>o(e.target.error)})),deleteDB=e=>new Promise(((t,r)=>{const o=indexedDB.deleteDatabase(e);o.onsuccess=()=>t(db64),o.onerror=({target:e})=>r(new Error(`Error deleting database: ${e.error}`)),o.onblocked=()=>{for(const t of connections)t.result.name===e&&t.result.close();deleteDB(e)}})),db64={create:async(e,t)=>isArray(t)?(await openDatabase(e,t),db64):console.error("storeNames should be an array"),use:(e,t)=>(indexedDB.open(e,1).onsuccess=r=>{r.target.result.objectStoreNames.contains(t)||console.error(`Store ${t} does not exist. You may need to manage the lifecycle of databse "${e}" if outdated.`)},{set:async(r,o)=>openDatabase(e,t).then((e=>setData(e,t,r,o))).catch(console.error),setEntries:async r=>openDatabase(e,t).then((e=>setData(e,t,null,r,"entries"))).catch(console.error),get:async r=>openDatabase(e,t).then((e=>getData(e,t,r))).catch(console.error),getEntries:async r=>openDatabase(e,t).then((e=>getData(e,t,r,"entries"))).catch(console.error),delete:async r=>openDatabase(e,t).then((e=>deleteData(e,t,r))).catch(console.error)}),clear:async(e,t)=>openDatabase(e,t).then((e=>clearStore(e,t))).catch(console.error),delete:async e=>deleteDB(e).catch(console.error)};export default db64;